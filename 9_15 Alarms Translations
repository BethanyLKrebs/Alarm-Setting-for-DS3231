int Alarm_Params[7];
int Alarm_Index=0;

char* Alarm1_Opts[]={"1: 1x Sec", "2: On sec match", "3: On min/sec match",
"4: On hrs/min/sec match"};
char* Alarm2_Opts[]={"1x Min","On min match","On min/hour match"};

// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val)
{
  return( (val/10*16) + (val%10) );
}

// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val)
{
  return( (val/16*10) + (val%16) );
}


char rx1_byte = 0;
void Set_Alarm1_Opts(int A1_Bin, int params[]) {
  if(A1_Bin ==1 && rx1_byte <= 0){
  Serial.println("Which alarm options would you like? Pick a number");
  for(int j = 0; j<4;j++){
    Serial.println(Alarm1_Opts[j]);
    delay(500);
  }
  }
  while (!Serial.available()){
  }
  if (Serial.available() > 0) {    // is a character available?
    rx1_byte = Serial.read();       // get the character
    Serial.println(rx1_byte);
    // check if a number was received
    if (rx1_byte == '1') {
      params[0] = params[0]|0x80;
      params[1] = params[1]|0x80;
      params[2] = params[2]|0x80;
      Serial.println("Alarm 1x per second set");
    }
    if(rx1_byte =='2'){
      params[1] = params[1] | 0x80;
      params[2] = params[2] | 0x80;
      Serial.println("Alarm when seconds match set");
    }
    if(rx1_byte =='3'){
      params[2] = params[2] | 0x80;
      Serial.println("Alarm when minutes and seconds match set");
    }
    if(rx1_byte =='4'){
      Serial.println("Alarm when hours, minutes and seconds match set");
    }
      Serial.print("Number received: ");
      Serial.println(rx1_byte);
    }
    else {
      Serial.println("Invalid Choice, pick again");
  }
    if(A1_Bin ==1 && rx1_byte > 0){
      Serial.println("Alarm1 options chosen, continuing");
    }
  } // end: if (Serial.available() > 0)

char rx2_byte = 0;
void Set_Alarm2_Opts(int A2_Bin, int params[]) {
  if(A2_Bin ==1 && rx2_byte <= 0){
  Serial.println("Which alarm options would you like? Pick a number");
  for(int j = 0; j<3;j++){
    Serial.println(Alarm2_Opts[j]);
    delay(500);
  }
  }
  while (!Serial.available()){
  }
  if (Serial.available() > 0) {    // is a character available?
    rx2_byte = Serial.read();       // get the character
    Serial.println(rx2_byte);
    // check if a number was received
    if (rx2_byte == '1') {
      params[0] = params[0]|0x80;
      params[1] = params[1]|0x80;
      params[2] = params[2]|0x80;
      Serial.println("Alarm 1x per second set");
    }
    if(rx2_byte =='2'){
      params[1] = params[1] | 0x80;
      params[2] = params[2] | 0x80;
      Serial.println("Alarm when seconds match set");
    }
    if(rx2_byte =='3'){
      params[2] = params[2] | 0x80;
      Serial.println("Alarm when minutes and seconds match set");
    }
    if(rx2_byte =='4'){
      Serial.println("Alarm when hours, minutes and seconds match set");
    }
      Serial.print("Number received: ");
      Serial.println(rx2_byte);
    }
    else {
      Serial.println("Invalid Choice, pick again");
  }
    if(A1_Bin ==1 && rx2_byte > 0){
      Serial.println("Alarm1 options chosen, continuing");
    }
  } // end: if (Serial.available() > 0)

  


void Alarm_Translate(int A1_Sec,int A1_Min, int A1_Hours,int A2_Min, int A2_Hours, int A1_Bin = 0, int A2_Bin = 0){
  if(A1_Bin ==1){
  byte A1_sec_val = decToBcd(A1_Sec);
  byte A1_min_val = decToBcd(A1_Min);  
  byte A1_hour_val = decToBcd(A1_Hours);
  byte A1_date_val = 0x80;
  Alarm_Params[0] = A1_sec_val;
  Alarm_Params[1] = A1_min_val;
  Alarm_Params[2] = A1_hour_val;
  Alarm_Params[3] = A1_date_val;
  Serial.print("A1 seconds:");
  Serial.println(A1_sec_val,BIN);
  Serial.print("A1 minutes:");
  Serial.println(A1_min_val,BIN);
  Serial.print("A1 hours:");
  Serial.println(A1_hour_val,BIN);
  }
  if(A2_Bin ==1){
  byte A2_min_val = decToBcd(A2_Min);
  byte A2_hour_val = decToBcd(A2_Hours);
  byte A2_date_val = 0x80;
  Alarm_Params[4] = A2_min_val;
  Alarm_Params[5] = A2_hour_val;
  Alarm_Params[6] = A2_date_val;
  Serial.print("A2 minutes:");
  Serial.println(A2_min_val,BIN);
  Serial.print("A2 hours:");
  Serial.println(A2_hour_val,BIN);
  }
  Serial.println("Alarm values translated");  
}



void setup() {
  Serial.begin(9600);
  Alarm_Translate(10,15,17,23,10,1,1);
  // put your setup code here, to run once:
  Set_Alarm1_Opts(1,Alarm_Params);
}

void loop() {
  for(int i=0; i <7; i = i+1){
     Serial.println(Alarm_Params[i],BIN);
  }
  delay(50000);
  // put your main code here, to run repeatedly:

}
